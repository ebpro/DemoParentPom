<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <!-- The Basics -->
    <groupId>fr.univtln.bruno.demos.poms</groupId>
    <artifactId>demoparentpom</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <dependencyManagement>
        <dependencies>
            <!-- Junit -->
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-engine</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.junit.vintage</groupId>
                <artifactId>junit-vintage-engine</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- Utilities test function in unit tests -->
            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest</artifactId>
                <version>2.2</version>
                <scope>test</scope>
            </dependency>

            <!-- Lombok -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>1.18.16</version>
                <scope>provided</scope>
            </dependency>

            <!-- Eclipse Collections -->
            <dependency>
                <groupId>org.eclipse.collections</groupId>
                <artifactId>eclipse-collections</artifactId>
                <version>10.4.0</version>
            </dependency>

            <!-- JDBC -->
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>1.4.200</version>
            </dependency>

            <!-- JPA -->
            <dependency>
                <groupId>jakarta.persistence</groupId>
                <artifactId>jakarta.persistence-api</artifactId>
                <version>3.0.0</version>
            </dependency>

            <dependency>
                <groupId>org.eclipse.persistence</groupId>
                <artifactId>eclipselink</artifactId>
                <version>3.0.0</version>
            </dependency>

            <!-- JAXB -->
            <dependency>
                <groupId>jakarta.xml.bind</groupId>
                <artifactId>jakarta.xml.bind-api</artifactId>
                <version>3.0.0</version>
            </dependency>
            <dependency>
                <groupId>com.sun.xml.bind</groupId>
                <artifactId>jaxb-impl</artifactId>
                <version>3.0.0</version>
                <scope>runtime</scope>
            </dependency>

            <!-- EL -->
            <dependency>
                <groupId>org.glassfish</groupId>
                <artifactId>jakarta.el</artifactId>
                <version>4.0.0</version>
            </dependency>

            <!-- JWT -->
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-api</artifactId>
                <version>${jjwt.version}</version>
            </dependency>
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-impl</artifactId>
                <version>${jjwt.version}</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-jackson</artifactId>
                <version>${jjwt.version}</version>
                <scope>runtime</scope>
            </dependency>

            <!-- BEAN VALIDATION -->
            <!-- added transitively by the Hibernate Validator -->
            <!--dependency>
                <groupId>jakarta.validation</groupId>
                <artifactId>jakarta.validation-api</artifactId>
                <version>3.0.0</version>
            </dependency-->
            <dependency>
                <groupId>org.hibernate.validator</groupId>
                <artifactId>hibernate-validator</artifactId>
                <version>7.0.0.Final</version>
            </dependency>

            <!-- JAXRS -->
            <dependency>
                <groupId>org.glassfish.jersey</groupId>
                <artifactId>jersey-bom</artifactId>
                <version>${jersey.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- JAXRS -->
            <dependency>
                <groupId>jakarta.ws.rs</groupId>
                <artifactId>jakarta.ws.rs-api</artifactId>
                <version>3.0.0</version>
                <scope>provided</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>
    <properties>
        <!-- These two properties should be overriden in sub projects -->
        <github.account>emmanuelbruno</github.account>
        <app.main.class />

        <!-- github server corresponds to entry in ~/.m2/settings.xml -->
        <github.global.server>github</github.global.server>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <maven.compiler.release>11</maven.compiler.release>
        <!-- still needed for sonar -->
        <maven.compiler.source>${maven.compiler.release}</maven.compiler.source>
        <maven.compiler.target>${maven.compiler.release}</maven.compiler.target>

        <junit.version>5.7.0</junit.version>

        <!-- JAXRS -->
        <jersey.version>3.0.0</jersey.version>
        <jjwt.version>0.11.2</jjwt.version>
    </properties>

    <!-- Build Settings -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.9.1</version>
                <executions>
                    <execution>
                        <id>stage-for-scm-publish</id>
                        <phase>post-site</phase>
                        <goals>
                            <goal>stage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-scm-publish-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>scm-publish</id>
                        <phase>site-deploy</phase>
                        <goals>
                            <goal>publish-scm</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <executions>
                    <execution>
                        <id>enforce-versions</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>3.5.4</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>1.8</version>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>2.0.0</version>
                <configuration>
                    <licenseName>mit</licenseName>
                </configuration>
                <executions>
                    <execution>
                        <id>first</id>
                        <goals>
                            <goal>update-file-header</goal>
                        </goals>
                        <phase>process-sources</phase>
                    </execution>
                </executions>
            </plugin>
        </plugins>

        <!-- Centralized plugin configuration. These plugins have to be
        explicitly activated in children projects. Versions are given to ensure
        build repeatability. -->
        <pluginManagement>

            <plugins>
                <!-- The maven compiler. https://maven.apache.org/plugins/maven-compiler-plugin/
                It sets the source and target java version.
                mvn compile
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.1</version>
                </plugin>

                <!-- Creates a jar of the sources of the project in the target directory.
                https://maven.apache.org/plugins/maven-source-plugin/
                mvn source:jar
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.2.1</version>
                    <configuration>
                        <archive>
                            <manifest>
                                <addClasspath>false</addClasspath>
                            </manifest>
                        </archive>
                    </configuration>
                </plugin>

                <!-- Cleans the projects working directory
                https://maven.apache.org/plugins/maven-clean-plugin/
                mvn clean:clean
                It can be used with other phases/goals
                mvn clean package
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.2.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.1.0</version>
                    <configuration>
                        <addDefaultExcludes>false</addDefaultExcludes>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>3.0.0-M1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-archetype-plugin</artifactId>
                    <version>3.1.2</version>
                </plugin>

                <!-- Generates the javadoc. Private members are shown.
                see <reporting> below for a public only version
                https://maven.apache.org/plugins/maven-javadoc-plugin/
                mvn javadoc:javadoc
                mvn javadoc:javadoc-jar
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>3.2.0</version>
                    <configuration>
                        <show>private</show>
                    </configuration>
                </plugin>

                <!-- Deploy maven artifacts to a repository
                http://maven.apache.org/plugins/maven-deploy-plugin/
                mvn deploy
                mvn deploy:deploy
                mvn deploy:deploy-file

                see <distributionManagement> above
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>3.0.0-M1</version>
                </plugin>

                <!-- Maven utilities :
                  - adds sources, test, resources directories, ...
                  mvn build-helper:add-source
                  mvn build-helper:add-test-source
                  mvn build-helper:add-resource
                  mvn build-helper:add-test-resource
                  - parses artifact version
                  - removes project artifact from the local repository
                  mvn build-helper:remove-project-artifact
                  ...
                http://www.mojohaus.org/build-helper-maven-plugin/index.html
                -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>3.2.0</version>
                </plugin>

                <!-- Executes unit tests and Generates reports (target/surefire-reports).
                http://maven.apache.org/surefire/maven-surefire-plugin/
                mvn test

                to avoid test execution :
                mvn install -DskipTests

                to avoid test compilation, execution and concerns integration test (see failsafe plugin):
                mvn install -Dmaven.test.skip=true

                see junit plugin
                -->
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.0.0-M4</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-report-plugin</artifactId>
                    <version>3.0.0-M4</version>
                    <configuration>
                        <aggregate>true</aggregate>
                        <linkXRef>true</linkXRef>
                    </configuration>
                </plugin>

                <!-- runs integration tests.
                mvn verify
                http://maven.apache.org/surefire/maven-failsafe-plugin/
                See docker profile to bind needed servers (web, database, ...)
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>3.0.0-M4</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>integration-test</goal>
                                <goal>verify</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- Generate of web site for the project. It includes static and dynamic pages,
                and several reports.
                See <reporting> below.
                See the directory src/site
                https://maven.apache.org/plugins/maven-site-plugin/

                mvn site

                The site can be deployed after generation (copied with scp or other protocols)
                with mvn site-deploy. Add
                <distributionManagement>
                    <site>
                      <id>www.yourcompany.com</id>
                      <url>scp://www.yourcompany.com/www/docs/project/</url>
                    </site>
                </distributionManagement>
                to the project.

                mvn site:run launches de
                a web server see http://localhost:8080/
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <configuration>
                        <skipDeploy>true</skipDeploy>
                    </configuration>
                </plugin>

                <!-- This plugins implements the gitflow branching model (http://nvie.com/git-model,
                https://www.atlassian.com/git/tutorials/comparing-workflows/#!workflow-gitflow )
                for maven. It gives an automatic way to manage versions and branches.
                https://bitbucket.org/atlassian/jgit-flow/wiki/Home

                mvn jgitflow:feature-start:
                  creates a new feature branch; pushes the branch to origin automatically (can be shared and
                  used by jenkins).
                mvn jgitflow:feature-finish:
                  merges the feature branch back into the development branch and pushes to origin.
                    The good way :
                        git fetch : make sure your local repo copy is up-to-date
                        git checkout development : go to development
                        git merge origin/development : make sure your local develop is up-to-date (origin being the remote's name here)
                        git checkout <feature-branch> : go to you feature branch again
                        git merge develop : Merge and solve conflicts, if any (on you feature branch)
                        mvn jgitflow:feature-finish you already solved the conflicts
                mvn jgitflow:release-start:
                   creates a release branch (freeze to prepare a release, only bugfix, documentation
                   and translation) and pushes it to origin.
                mvn jgitflow:release-finish:
                   builds, tags and merges the release branch back into master and development;
                   updates versions in master and development branches
                mvn jgitflow:hotfix-start: like mvn jgitflow:release-start but branches off of master
                mvn jgitflow:hotfix-finish: like mvn jgitflow:release-finish

                We forbid deploy from the workstations, it has to be done by the C.I. server.
                -->
                <plugin>
                    <groupId>external.atlassian.jgitflow</groupId>
                    <artifactId>jgitflow-maven-plugin</artifactId>
                    <version>1.0-m5.1</version>
                    <dependencies>
                        <dependency>
                            <groupId>com.jcraft</groupId>
                            <artifactId>jsch</artifactId>
                            <version>0.1.55</version>
                        </dependency>
                    </dependencies>
                    <configuration>
                        <!-- Enable this to push to origin using SSH keys -->
                        <enableSshAgent>true</enableSshAgent>
                        <!-- Keep your maven submodules at the same version as the parent POM -->
                        <autoVersionSubmodules>true</autoVersionSubmodules>
                        <!-- Pushing in-development features to origin allows all devs to see what each other
                             are working on                                        -->
                        <pushFeatures>true</pushFeatures>
                        <!-- This allows the CI server (e.g. Jenkins) to automatically push new releases to
                             origin; you can then either manually deploy them or, if you are doing Continuous
                             Deployments, auto-deploy them to prod -->
                        <pushReleases>true</pushReleases>
                        <pushHotfixes>true</pushHotfixes>

                        <!-- append the feature name to the version on the feature branch. -->
                        <enableFeatureVersions>true</enableFeatureVersions>
                        <!-- Prevents deployments from dev workstations so that they can be done by a CI
                             server  -->
                        <noDeploy>true</noDeploy>

                        <!-- Whether to squash commits into a single commit before merging. -->
                        <squash>false</squash>

                        <scmCommentPrefix>[gitflow]</scmCommentPrefix>

                        <!-- A VOIR -->
                        <featureRebase>true</featureRebase>


                        <!--pullDevelop>true</pullDevelop>
                        <pullMaster>true</pullMaster-->

                        <flowInitContext>
                            <masterBranchName>master</masterBranchName>
                            <developBranchName>develop</developBranchName>
                            <featureBranchPrefix>feature/</featureBranchPrefix>
                            <releaseBranchPrefix>release/</releaseBranchPrefix>
                            <hotfixBranchPrefix>hotfix/</hotfixBranchPrefix>
                            <versionTagPrefix />
                        </flowInitContext>
                    </configuration>
                </plugin>

                <!-- Sets the default class to run with
                mvn exec:java
                -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>1.6.0</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>java</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <!--suppress MavenModelInspection -->
                        <mainClass>${app.main.class}</mainClass>
                    </configuration>
                </plugin>

                <!-- Builds a jar that can merge the artifact and its dependencies
                https://maven.apache.org/plugins/maven-shade-plugin/
                WARNING minimizeJar can cause trouble, disable it in the child project if needed

                The manifest mainclass can be given with the property ${app.main.class}.

                Its is added to the package phase.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>3.2.3</version>
                    <configuration>
                        <createDependencyReducedPom>true</createDependencyReducedPom>
                        <minimizeJar>true</minimizeJar>
                        <!-- The shaded artifact is not the main artifact -->
                        <shadedArtifactAttached>true</shadedArtifactAttached>
                        <shadedClassifierName>withdependencies</shadedClassifierName>

                        <transformers>
                            <!-- merge services ressource for SPI -->
                            <transformer
                                implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />

                            <!-- makes a default entry point in the shaded jar -->
                            <transformer
                                implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                <manifestEntries>
                                    <Main-Class>${app.main.class}</Main-Class>
                                    <X-Compile-Source-JDK>${java.version}</X-Compile-Source-JDK>
                                    <X-Compile-Target-JDK>${java.version}</X-Compile-Target-JDK>
                                </manifestEntries>
                            </transformer>

                            <!-- keep a default config file -->
                            <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                <resource>config.properties</resource>
                                <resource>log4j.properties</resource>
                            </transformer>
                        </transformers>

                        <!-- removes signatures in uberjar -->
                        <filters>
                            <filter>
                                <artifact>*:*</artifact>
                                <excludes>
                                    <exclude>META-INF/*.SF</exclude>
                                    <exclude>META-INF/*.DSA</exclude>
                                    <exclude>META-INF/*.RSA</exclude>
                                </excludes>
                            </filter>
                        </filters>

                    </configuration>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>shade</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>3.3.0</version>
                </plugin>

                <!-- configuration of the SCM plugin to deploy github pages in a dedicated branch -->
                <!--
                Initial creation of the branch has to be done manually, as a Git orphan branch:
                1. git checkout - -orphan gh-pages to create the branch locally,
                2. rm .git/index ; git clean -fdx to clean the branch content and let it empy,
                3. copy an initial site content,
                4. commit and push: git add *, git commit -m "initial site content", git push
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-scm-publish-plugin</artifactId>
                    <version>3.1.0</version>
                    <configuration>
                        <!--providerImplementations>
                            <git>jgit</git>
                        </providerImplementations-->
                        <pubScmUrl>scm:git:https://github.com/${github.account}/${project.artifactId}</pubScmUrl>
                        <scmBranch>gh-pages</scmBranch>
                        <username>${env.GITHUBLOGIN}</username>
                        <password>${env.GITHUBPASSWORD}</password>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>3.1.2</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>3.0.0-M1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>

                <!-- Sonarqube -->
                <plugin>
                    <groupId>org.sonarsource.scanner.maven</groupId>
                    <artifactId>sonar-maven-plugin</artifactId>
                    <version>3.7.0.1746</version>
                </plugin>

                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>0.8.6</version>
                </plugin>

                <plugin>
                    <groupId>io.github.r0bb3n</groupId>
                    <artifactId>sonar-quality-gate-maven-plugin</artifactId>
                    <version>1.0.2</version>
                </plugin>

            </plugins>
        </pluginManagement>
    </build>

    <!-- See maven:site plugin -->
    <reporting>
        <excludeDefaults>true</excludeDefaults>
        <!--outputDirectory>${project.build.directory}/site</outputDirectory-->
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>3.1.1</version>
                <configuration>
                    <!--dependencyLocationsEnabled>false</dependencyLocationsEnabled-->
                </configuration>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>summary</report>
                            <report>dependency-info</report>
                            <report>team</report>
                            <report>scm</report>
                            <report>distribution-management</report>
                            <report>issue-management</report>
                            <report>mailing-lists</report>
                            <report>ci-management</report>
                            <report>dependencies</report>
                            <!--report>dependency-convergence</report-->
                            <report>dependency-management</report>
                            <report>index</report>
                            <report>licenses</report>
                            <report>modules</report>
                            <report>plugin-management</report>
                            <report>plugins</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <!--plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-changelog-plugin</artifactId>
                <version>2.3</version>
            </plugin-->

            <!-- A specific version of the javadoc for the web site
            with only public members -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration></configuration>
                <reportSets>
                    <reportSet>
                        <id>default</id>
                        <configuration>
                            <show>public</show>
                        </configuration>
                        <reports>
                            <report>javadoc</report>
                            <!--report>test-javadoc</report-->
                        </reports>
                    </reportSet>
                    <!--reportSet>
                        <id>aggregate</id>
                        <configuration>
                        </configuration>
                        <reports>
                            <report>aggregate</report>
                        </reports>
                    </reportSet-->
                </reportSets>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>2.8.1</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>dependency-updates-report</report>
                            <report>plugin-updates-report</report>
                            <report>property-updates-report</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

        </plugins>
    </reporting>

    <!-- More Project Information -->
    <name>Demo Parent POM</name>
    <description>A parent POM from the Demos</description>
    <url>https://${github.account}.github.io/${project.artifactId}/</url>
    <inceptionYear>2020</inceptionYear>
    <licenses>
        <license>
            <name>mit</name>
        </license>
    </licenses>
    <organization>
        <name>Université de Toulon</name>
        <url>http://www.univ-tln.fr</url>
    </organization>
    <developers>
        <developer>
            <id>emmanuelbruno</id>
            <name>Emmanuel Bruno</name>
            <email>emmanuel.bruno@univ-tln.fr</email>
            <url>http://bruno.univ-tln.fr</url>
            <organization>Université de Toulon</organization>
            <organizationUrl>http://www.univ-tln.fr</organizationUrl>
            <roles>
                <role>architect</role>
                <role>developer</role>
            </roles>
            <timezone>Europe/Paris</timezone>
        </developer>
    </developers>

    <!-- Environment Settings -->
    <issueManagement>
        <system>GitHub</system>
        <url>https://github.com/${github.account}/${project.artifactId}/issues</url>
    </issueManagement>
    <!--ciManagement>
        <system>Travis</system>
        <url>https://travis-ci.org/${github.account}/${project.artifactId}</url>
    </ciManagement-->
    <ciManagement>
        <system>Github Actions</system>
        <url>https://github.com/${github.account}/${project.artifactId}/actions</url>
    </ciManagement>
    <scm>
        <url>https://github.com/${github.account}/${project.artifactId}/tree/${project.scm.tag}</url>
        <connection>scm:git:git@github.com:${github.account}/${project.artifactId}.git</connection>
        <developerConnection>scm:git:git@github.com:${github.account}/${project.artifactId}.git</developerConnection>
    </scm>
    <repositories>
        <repository>
            <id>central</id>
            <url>https://repo1.maven.org/maven2</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>github</id>
            <name>GitHub Packages</name>
            <url>https://maven.pkg.github.com/${github.account}/${project.artifactId}</url>
        </repository>
    </repositories>
    <distributionManagement>
        <repository>
            <id>github</id>
            <name>GitHub Packages</name>
            <url>https://maven.pkg.github.com/${github.account}/${project.artifactId}</url>
        </repository>
        <snapshotRepository>
            <id>github</id>
            <name>GitHub Packages</name>
            <url>https://maven.pkg.github.com/${github.account}/${project.artifactId}</url>
        </snapshotRepository>
        <site>
            <id>github.pages</id>
            <url>scm:git:ssh://git@github.com/${github.account}/${project.artifactId}</url>
        </site>
    </distributionManagement>

</project>
