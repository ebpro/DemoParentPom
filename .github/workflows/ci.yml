## A simple example to use  Github Actions for Java CI
## This produces a simple jar artefact are store in the github maven repository
# We build the project using maven.
# The credential ae set in a specific settings.xml using env variables
# The ENV variables are stored as Github Secrets
#
# The secrets are set in CLI with https://www.npmjs.com/package/gh-create-update-secret
#
#  ghrepo=`git remote -v|grep fetch|sed 's/.*:\(.*\).git/\1/'`
#  export GH_PAT=$GITHUB_PASSWORD
#  gh-create-update-secret --secret GITHUBLOGIN 		--value $GITHUB_LOGIN --repo $ghrepo
#  gh-create-update-secret --secret GITHUBPASSWORD 	--value $GITHUB_PASSWORD --repo $ghrepo

#  gh-create-update-secret --secret DOCKER_USERNAME  	--value $DOCKER_USERNAME --repo $ghrepo
#  gh-create-update-secret --secret DOCKER_PASSWORD  	--value $DOCKER_PASSWORD --repo $ghrepo

#  gh-create-update-secret --secret SONAR_TOKEN 		--value $SONAR_TOKEN --repo $ghrepo
name: Java CI

# on every push
on: [push]

env:
  GITHUBLOGIN: ${{secrets.GITHUBLOGIN}}
  GITHUBPASSWORD: ${{secrets.GITHUBPASSWORD}}
  DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}

jobs:
  # This job build, test, package and deploy the artefact
  maven-build:
    # The tags on the runner
    runs-on: [self-hosted, Linux]

    steps:
      #we get the content of the repository
      - uses: actions/checkout@v3

      # build the project in a docker container with a specific maven settings.xml
      # it uses env variables from github secrets for the credentials
      # to github, dockerhub and sonar.
      - name: Build and test with Maven in docker
        run: ./mvn.sh clean verify
      - name: Deploy Maven Artifacts
        run: ./mvn.sh deploy
      - name: Notify dedicated teams channel of Success
        #        uses: jdcargile/ms-teams-notification@v1.3
        uses: toko-bifrost/ms-teams-deploy-card@master  
        if: ${{ success() }}
        with:
          github-token: ${{ github.token }} # this will use the runner's token.
            # FOR jdcargile          ms-teams-webhook-uri: ${{ secrets.MSTEAMS_WEBHOOK }}
            # notification-summary: Build and Deploy success.
            # notification-color: 28a745
            # timezone: Europe/Paris
          webhook-uri: ${{ secrets.MSTEAMS_WEBHOOK }}
      - name: Notify dedicated teams channel of Failure
        uses: jdcargile/ms-teams-notification@v1.3
        if: ${{ failure() }}
        with:
          github-token: ${{ github.token }} # this will use the runner's token.
          teams-webhook-uri: ${{ secrets.MSTEAMS_WEBHOOK }}
            #          ms-teams-webhook-uri: ${{ secrets.MSTEAMS_WEBHOOK }}
            #          notification-summary: Build and Deploy failure.
            #          notification-color: dc3545
            #          timezone: Europe/Paris

  # This job publish the successsite for develop branch
  maven-site:
    runs-on: [self-hosted, Linux]
    needs: maven-build
    # Develop branch only
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Build and deploy site with Maven
        run: ./mvn.sh site:site site-deploy
